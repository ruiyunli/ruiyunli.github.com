<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | RyanLeo]]></title>
  <link href="http://ruiyunli.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://ruiyunli.github.com/"/>
  <updated>2013-04-05T19:05:12+08:00</updated>
  <id>http://ruiyunli.github.com/</id>
  <author>
    <name><![CDATA[RyanLeo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Baidu Map]]></title>
    <link href="http://ruiyunli.github.com/blog/2013/04/05/android-baidu-map/"/>
    <updated>2013-04-05T17:35:00+08:00</updated>
    <id>http://ruiyunli.github.com/blog/2013/04/05/android-baidu-map</id>
    <content type="html"><![CDATA[<h3>关于取点</h3>

<p>目的：点击屏幕上任意一点的位置，得到其经度和纬度</p>

<p>思路：获取屏幕坐标，转化为经纬度坐标</p>

<!-- more -->


<pre><code>int x = (int) event.getX();
int y = (int) event.getY();

// 将像素坐标转为地址坐标
Projection getProjection = mMapView.getProjection();
GeoPoint pt = getProjection.fromPixels(x, y);   

String longitude = Integer.toString(pt.getLongitudeE6());
String latitude = Integer.toString(pt.getLatitudeE6());            

switch (event.getAction() &amp; MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    logText.setText("x: " + x + " y: " + y
            + '\n' +" longitude: " + longitude
            + " latitude: " + latitude);

    corrPoint = new GeoPoint(pt.getLatitudeE6(), pt.getLongitudeE6());
    corrItem = new OverlayItem(corrPoint, "title", "snippet");
    corrItem.setMarker(getResources().getDrawable(R.drawable.icon_marka));
    correctionOverlay.refreshItem(corrItem);
    mMapView.refresh();

    break;
}
</code></pre>

<p><code>参考资料</code>
http://www.cnblogs.com/fangfang01/archive/2013/03/05/2945050.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Errors]]></title>
    <link href="http://ruiyunli.github.com/blog/2013/04/05/android-errors/"/>
    <updated>2013-04-05T17:31:00+08:00</updated>
    <id>http://ruiyunli.github.com/blog/2013/04/05/android-errors</id>
    <content type="html"><![CDATA[<h3>Installation error: INSTALL_FAILED_INSUFFICIENT_STORAGE</h3>

<p>内存不够，卸掉一些程序</p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Alert Dialog]]></title>
    <link href="http://ruiyunli.github.com/blog/2013/04/05/android-dialog/"/>
    <updated>2013-04-05T16:32:00+08:00</updated>
    <id>http://ruiyunli.github.com/blog/2013/04/05/android-dialog</id>
    <content type="html"><![CDATA[<p>原文地址：http://www.cnblogs.com/Gaojiecai/archive/2011/12/10/2283156.html</p>

<p>我们在平时做开发的时候，免不了会用到各种各样的对话框，相信有过其他平台开发经验的朋友都会知道，大部分的平台都只提供了几个最简单的实现，如果我们想实现自己特定需求的对话框，大家可能首先会想到，通过继承等方式，重写我们自己的对话框。当然，这也是不失为一个不错的解决方式，但是一般的情况却是这样，我们重写的对话框，也许只在一个特定的地方会用到，为了这一次的使用，而去创建一个新类，往往有点杀鸡用牛刀的感觉，甚至会对我们的程序增加不必要的复杂性，对于这种情形的对话框有没有更优雅的解决方案呢？</p>

<!-- more -->


<p> <br/>
幸运的是，android提供了这种问题的解决方案，刚开始接触android的时候，我在做一个自定义对话框的时候，也是通过继承的方式来实现，后来随着对文档了解的深入，发现了android起始已经提供了相应的接口Dialog Builder ，下面我就吧相关的内容在这里分享一下，也能让更多的初学者少走弯路。</p>

<p>首先是一个最简单的应用，就是弹出一个消息框，在android中可以这样实现</p>

<pre><code>new AlertDialog.Builder(self)
    .setTitle("标题") 
    .setMessage("简单消息框")
    .setPositiveButton("确定", null)
    .show();
</code></pre>

<p>效果如下：</p>

<p><img src="/images/AndroidDialog/pic1.png" alt="Alt text" /></p>

<p>上面的代码中我们新建了一个AlertDialog，并用Builder方法形成了一个对象链，通过一系列的设置方法，构造出我们需要的对话框，然后调用show方法显示出来，注意到Builder方法的参数self，这个其实是Activity对象的引用，根据你所处的上下文来传入相应的引用就可以了。例如在onCreate方法中调用，只需传入this即可。</p>

<p>下面是带确认和取消按钮的对话框:</p>

<pre><code>new AlertDialog.Builder(self) 
    .setTitle("确认")
    .setMessage("确定吗？")
    .setPositiveButton("是", null)
    .setNegativeButton("否", null)
    .show();
</code></pre>

<p><img src="/images/AndroidDialog/pic2.png" alt="Alt text" /></p>

<p>注意到，这里有两个null参数，这里要放的其实是这两个按钮点击的监听程序，由于我们这里不需要监听这些动作，所以传入null值简单忽略掉，但是实际开发的时候一般都是需要传入监听器的，用来响应用户的操作。</p>

<p>下面是一个可以输入文本的对话框:</p>

<pre><code>new AlertDialog.Builder(self)
    .setTitle("请输入")
    .setIcon(android.R.drawable.ic_dialog_info)
    .setView(new EditText(self))
    .setPositiveButton("确定", null)
    .setNegativeButton("取消", null)
    .show();
</code></pre>

<p><img src="/images/AndroidDialog/pic3.png" alt="Alt text" /></p>

<p>如上代码，我们用setView方法，为我们的对话框传入了一个文本编辑框，当然，你可以传入任何的视图对象，比如图片框，WebView等。。尽情发挥你的想象力吧~
下面是单选框与多选框，也是非常有用的两种对话框:</p>

<pre><code>new AlertDialog.Builder(self)
    .setTitle("请选择")
    .setIcon(android.R.drawable.ic_dialog_info)                
    .setSingleChoiceItems(new String[] {"选项1","选项2","选项3","选项4"}, 0, 
    new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int which) {
            dialog.dismiss();
            }
        }
    )
    .setNegativeButton("取消", null)
    .show();
</code></pre>

<p><img src="/images/AndroidDialog/pic4.png" alt="Alt text" /></p>

<p>单选和多选对话框应该是我们平时用的非常多的，代码应该很好理解，下面再最后介绍两个
列表对话框:</p>

<pre><code>new AlertDialog.Builder(self)
    .setTitle("列表框")
    .setItems(new String[] {"列表项1","列表项2","列表项3"}, null)
    .setNegativeButton("确定", null)
    .show();
</code></pre>

<p><img src="/images/AndroidDialog/pic5.png" alt="Alt text" /></p>

<p>最后，在对话框中显示图片:</p>

<pre><code>ImageView img = new ImageView(self);
img.setImageResource(R.drawable.icon);

new AlertDialog.Builder(self)
    .setTitle("图片框")
    .setView(img)
    .setPositiveButton("确定", null)
    .show();
</code></pre>

<p><img src="/images/AndroidDialog/pic6.png" alt="Alt text" /></p>

<p>我们传入了一个ImageView来显示图片，这里显示了一个经典的android小绿人图标，当然这里还可以放上网络图片，具体的实现方法就不介绍了，留给大家来练习吧~</p>

<p>最后总结一下，android平台为我们开发提供了极大的便利,DialogBuilder能做的不止这些，这里给大家展示的只是冰山一角，我们可以尽情的发挥想象，创造我们自己的对话框。</p>

<p><code>参考资料</code>
http://www.cnblogs.com/Gaojiecai/archive/2011/12/10/2283156.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Skills]]></title>
    <link href="http://ruiyunli.github.com/blog/2013/04/05/android-skills/"/>
    <updated>2013-04-05T15:59:00+08:00</updated>
    <id>http://ruiyunli.github.com/blog/2013/04/05/android-skills</id>
    <content type="html"><![CDATA[<h3>About Menu</h3>

<ul>
<li><p>showAsAction可以修改为ifroom或者always，是否显示</p></li>
<li><p>在手机中，竖屏状态下text是不会显示的，切换到横屏才会显示text</p></li>
<li><p>图标可以到Android网站下载<code>http://developer.android.com/design/downloads/index.html</code></p></li>
</ul>


<!-- more -->


<h3>About PreferenceActivity</h3>

<ul>
<li><p>xml文件保存在res/xml文件夹下面</p></li>
<li><p>对onChangePerferenceListener和OnClickPerferenceListener两个函数，返回TRUE分别表示更新值和已经处理响应，返回FALSE分别表示不保存newValue和没有处理响应</p></li>
<li><p>取得值，getString(key,"unset")</p></li>
<li><p>设置值，edit().putstring(key,"newValue");</p></li>
</ul>


<h3>Eclipse Line Number</h3>

<ul>
<li>Ctrl+ F10</li>
</ul>


<h3>About dip dp px sp</h3>

<ul>
<li>dip: device independent  pixels(设备独立像素). 不同设备有不同的显示效果,这个和设备硬件有关，一般我们为了支持WVGA、HVGA和QVGA推荐使用这这个，不依赖像素。</li>
</ul>


<p>这里要特别注意dip与屏幕密度有关，而屏幕密度又与具体的硬件有关，硬件设置不正确，有可能导致dip不能正常显示。在屏幕密度为160的显示屏上，1dip=1px，有时候可能你的屏幕分辨率很大如480*800，但是屏幕密度没有正确设置比如说还是160，那么这个时候凡是使用dip的都会显示异常，基本都是显示过小。</p>

<pre><code>dip的换算： 
    dip（value）=(int) (px（value）/1.5 + 0.5) 
</code></pre>

<ul>
<li>dp: 很简单，和dip是一样的。</li>
<li>px: pixels(像素)，不同的设备不同的显示屏显示效果是相同的，这是绝对像素，是多少就永远是多少不会改变。</li>
<li>sp: scaled pixels(放大像素). 主要用于字体显示best for textsize。</li>
</ul>


<p><code>备注</code>: 根据google的推荐，像素统一使用dip，字体统一使用sp</p>

<p>举个例子区别px和dip：</p>

<p>px就是像素，如果用px,就会用实际像素画，比个如吧，用画一条长度为240px的横线，在480宽的模拟器上看就是一半的屏宽，而在320宽的模拟器上看就是2／3的屏宽了。</p>

<p>而dip，就是把屏幕的高分成480分，宽分成320分。比如你做一条160dip的横线，无论你在320还480的模拟器上，都是一半屏的长度。</p>

<pre><code>public static int dip2px(Context context, float dipValue){ 
    final float scale = context.getResources().getDisplayMetrics().density; 
    return (int)(dipValue * scale + 0.5f); 
} 

public static int px2dip(Context context, float pxValue){ 
    final float scale = context.getResources().getDisplayMetrics().density; 
    return (int)(pxValue / scale + 0.5f); 
} 
</code></pre>

<h3>About Application</h3>

<ul>
<li><p>在任何一个Activity中使用this.getApplication()获得操作句柄</p></li>
<li><p>其中可以放置全局变量</p></li>
<li><p>可以写应用中某个模块的初始化代码</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
